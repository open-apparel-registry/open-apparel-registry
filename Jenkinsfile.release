#!groovy

node {
    properties([
        parameters([
            string(
                defaultValue: '',
                description: 'SHA of an existing container image. Usually what\'s currently on staging.', 
                name: 'GIT_COMMIT',
                trim: false
            )
        ])
    ])

    try {
        // Checkout the proper revision into the workspace.
        stage('checkout') {
            checkout([
                $class: 'GitSCM',
                branches: [[name: params.GIT_COMMIT]],
                extensions: [[$class: 'PruneStaleBranch']],
                userRemoteConfigs: [[
                    credentialsId: 'azaveaci',
                    url: 'git@github.com:open-apparel-registry/open-apparel-registry.git'
                ]]
            ])
        }

        env.AWS_PROFILE = 'open-apparel-registry'
        env.AWS_DEFAULT_REGION = 'eu-west-1'

        env.OAR_SETTINGS_BUCKET = 'openapparelregistry-testing-config-eu-west-1'

        // If we don't do this, the showmigrations stage will throw
        // django.core.exceptions.ImproperlyConfigured
        stage('setup') {
            wrap([$class: 'AnsiColorBuildWrapper']) {
                sh './scripts/bootstrap'
            }
        }

        env.OAR_SETTINGS_BUCKET = 'openapparelregistry-production-config-eu-west-1'

        // Plan and apply the current state of the production infrastructure
        // as outlined by whatever SHA is passed through as a build parameter.
        stage('infra') {
            // Environment used in Rollbar deploy notifications.
            // https://docs.rollbar.com/reference#post-deploy
            env.OAR_DEPLOYMENT_ENVIRONMENT = 'production'

            wrap([$class: 'AnsiColorBuildWrapper']) {
                sh 'docker-compose -f docker-compose.ci.yml run --rm terraform ./scripts/infra plan'
                withCredentials([[$class: 'StringBinding',
                                credentialsId: 'OAR_ROLLBAR_ACCESS_TOKEN',
                                variable: 'OAR_ROLLBAR_ACCESS_TOKEN']]) {
                    sh 'docker-compose -f docker-compose.ci.yml run --rm terraform ./scripts/infra apply'
                }
            }
        }

        // Kick off an ECS task to display any outstanding migrations.
        stage('showmigrations') {
            wrap([$class: 'AnsiColorBuildWrapper']) {
                sh './scripts/manage ecsmanage -e production showmigrations'
            }
        }
    } catch (err) {
        // Some exception was raised in the `try` block above. Assemble
        // an appropirate error message for Slack.
        def slackMessage = ":jenkins-angry: *Open Apparel Registry (Release Pipeline) (${params.GIT_COMMIT}) #${env.BUILD_NUMBER}*"

        slackMessage += "\n<${env.BUILD_URL}|View Build>"
        //slackSend channel: '#oar', color: 'danger', message: slackMessage

        // Re-raise the exception so that the failure is propagated to
        // Jenkins.
        throw err
    }
}
